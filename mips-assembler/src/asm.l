%{
// Code to go before the code generated by flex.
#include "src/lib/vector.h"
#include "src/lib/lexer.h"
#include "src/asm.h"

struct vector *tokenVector;
char *sourceCode;

// Adds a token to the vector of tokens that readPL0Tokens returns.
void addToken(char *type, char *token) {
    // We need to make copies of the strings because flex might later change
    // the contents of the string that yytext points to, so we want to keep the
    // current state of the string when addToken was called.
    pushLiteral(tokenVector, struct token, {strdup(type), strdup(token)});
}

#define ECHO // Stop the generated lexer code from outputing anything.

// Redefine YY_INPUT to read from the string passed to readPL0Tokens().
#define min(x, y) ((x) < (y) ? (x) : (y))
#define YY_INPUT(buf, num_read, max_size)\
{\
    int length = strlen(sourceCode);\
    if (length == 0) {\
        num_read = YY_NULL;\
    } else {\
        num_read = min(length, max_size);\
        memcpy(buf, sourceCode, num_read);\
        sourceCode += num_read;\
    }\
}
%}

    /* Definitions for use in rules section below. */
digit [0-9]
identifier [a-zA-Z][a-zA-Z0-9]*
comment #[^\n]*\n

%%
    /* Rules section. */

{digit}+        addToken("number-token", yytext);
{comment}       /* Ignore comments. */
".ent"|".end"|add|sub|addi|and|or|lw|sw|lui|beq|slt|slti|sltu|sltiu|j|,|:|"$"|"("|")" addToken(yytext, yytext); /* Tokens that don't have any special information associated with them, unlike numbers and identifiers. */
{identifier}    addToken("identifier-token", yytext);

%%
// Code to go after the code generated by flex.

// Generate a function that takes a string of assembly code uses the code
// generated by flex to read the string and make a vector of token structs.
struct vector *readAssembly(char *source) {
    // Assign the argument and result to global variables so that the code
    // generated by flex can access them.
    sourceCode = source;
    tokenVector = makeVector(struct token);

    yylex();

    return tokenVector;
}
