%{
// Code to go before the code generated by flex.
#include "lib/vector.h"
#include "lib/lexer.h"
#include "pl0.h"

struct vector *pl0Tokens;
char *pl0Source;

// Adds a token to the vector of tokens that readPL0Tokens returns.
void addToken(char *type, char *token, int line) {
    // We need to make copies of the strings because flex might later change
    // the contents of the string that yytext points to, so we want to keep the
    // current state of the string when addToken was called.
    pushLiteral(pl0Tokens, struct token, {strdup(type), strdup(token), line});
}

#define ECHO // Stop the generated lexer code from outputing anything.

// Redefine YY_INPUT to read from the string passed to readPL0Tokens().
#define min(x, y) ((x) < (y) ? (x) : (y))
#define YY_INPUT(buf, num_read, max_size)\
{\
    int length = strlen(pl0Source);\
    if (length == 0) {\
        num_read = YY_NULL;\
    } else {\
        num_read = min(length, max_size);\
        memcpy(buf, pl0Source, num_read);\
        pl0Source += num_read;\
    }\
}
%}

%option yylineno
%option outfile="pl0-lexer.c"

    /* Definitions for use in rules section below. */
digit [0-9]
identifier [a-zA-Z][a-zA-Z0-9]*
comment [/][*]([^*]|[*]+[^*/])*[*]+[/]

%%
    /* Rules section. */

\n              /* For some reason, this rule must be here to make flex update yylineno. */
{digit}+        addToken("number-token", yytext, yylineno);
{comment}       /* Ignore comments. */
begin|while|const|write|call|then|procedure|read|else|odd|end|int|if|do|>=|<=|<>|:=|"+"|"-"|"*"|"/"|=|<|>|"("|")"|,|;|"." addToken(yytext, yytext, yylineno); /* Tokens that don't have any special information associated with them, unlike numbers and identifiers. */
{identifier}    addToken("identifier-token", yytext, yylineno);

%%
// Code to go after the code generated by flex.

// Generate a function that takes a string of PL/0 source code uses the code
// generated by flex to read the string and make a vector of token structs.
struct vector *readPL0Tokens(char *source) {
    // Assign the argument and result to global variables so that the code
    // generated by flex can access them.
    pl0Source = source;
    pl0Tokens = makeVector(struct token);

    yylex();

    return pl0Tokens;
}
