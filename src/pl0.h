#ifndef PL0_H
#define PL0_H

// Use the lexer code generated by flex and pl0-vector.l to return a vector of
// token structs containing all of the tokens in the given string of PL/0
// source code.
// Defined in pl0-lexer.c, which is generated from pl0-vector.l by flex.
struct vector *readPL0Tokens(char *source);

// Takes a vector of tokens representing PL/0 source code tokens and returns a
// parse tree representing the structure of the code.
// Defined in pl0-parser.c.
struct parseTree parsePL0Tokens(struct vector *tokens);

// Takes a parse tree produced by parsePL0Tokens and returns a list of VM
// instructions.
// Defined in pl0-generator.c.
struct vector *generatePL0(struct parseTree tree);

// generatePL0 returns a vector of this struct:
struct instruction {
    int opcode;
    char *opcodeName;
    int lexicalLevel;
    int modifier;
};

// Print a list of instructions returned by generatePL0. If humanReadable is
// false, will print out a list of instructions suitable for being passed
// directly to the VM. Otherwise, prints something a little bit more friendly.
void printInstructions(struct vector *instructions, int humanReadable);

// Used for checking if generatePL0 had any errors.
char *getGeneratorErrors();

// Given a VM instruction name, such as "lit" or "sto", returns the
// corresponding integer opcode.
int getOpcode(char *instruction);

#endif
